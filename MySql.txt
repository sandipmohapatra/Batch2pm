MySql
----------------------
To see the databases
1)show databases;
-----------------------------------------------------
to create database
2)create database cognizantstud;
--------------------------------------------------------
to goto the database
3)use cognizantstud;
-------------------------------------------------------
to drop database
4)drop database cognizantstud;
-----------------------------------------------------------------------
to create a table
create table student(rollno int,name varchar(30),address varchar(30));
insert into student229 values(101,'Avijit','bangalore');
select * from student229;
--------------------------------------------------------------
5)create table student1
( studid int not null auto_increment,
name varchar(30) not null,
address varchar(30) not null,
primary key(studid)
);
----------------------------------------------------------------------------------
6)to insert record
INSERT INTO student1(name,address) VALUES('sandip','bangalore');
insert into student1 values(101,'tarun','chennei');
-----------------------------------------------------------------------------------
7)to view the records 
select * from student;
------------------------------------------------------------
8)update the record
update student set address='Bangalore' where name='tarun';
delete from student where  studid=1;
--------------------------------------------------------------------------
9)to create a view (view will not contain any data.it will contain only the query)
create view stud as select studid,name from student;
we can do insert,update and delete of the view it will reflect to the base table.
-------------------------------------------------------------------------------
10)to see all the tables and views
show tables;
----------------------------------------------------------------------
11)where condition :-
select * from student where name='tarun';
-------------------------------------------------------------------------
12)distinct :-(unique data will be displayed)
select distinct address from student;
-------------------------------------------------------------------------------
13)order by:-
select * from student order by name;
select * from student order by name asc;
select * from student order by name desc;
--------------------------------------------------------------------------------
14)group by
select address, count(*) from student group by address;
-----------------------------------------------------------------------------------
15)aggregate function
count(),sum(),avg(),min(),max(),first(),last()
---------------------------------------------------------------------
i)select count(*) from student;
first record  :- select name from student limit 1;
last record :-select name from student order by name desc limit 1;
--------------------------------------------------------------------------------------------
16)alter table:-
alter table student add salary int not null;
to add data to salary column :-
update student set salary=45000 where studid=101;
update student set salary=35000 where studid in (102,103,104);
---------------------------------------------------------------------------------
17)select sum(salary) from student;
18)select avg(salary) from student;
19)select min(salary) from student;
20)select max(salary) from student;
----------------------------------------------------------------------------------------------
between and example:-
21)select * from student where salary between 30000 and 46000;
----------------------------------------------------------------------------------------------
like % (wildcard)
----------------------------------------------------------------------------
22)select * from student where name like 'p%';(word starting with p will display)
select * from student where name like '%r';(word ending with r will display)
---------------------------------------------------------------------------
23)truncate table:-
it will delete all the data from the table.
truncate table student;
--------------------------------------------------------------------------- 
24)drop table;
it will delete the data as well as the table also.
drop table student;
-------------------------------------------------------------------------------

25)join
------------------------
create table marks
(studid int(4),
phy int(4),
chem int(4),
maths int(4),
tot int(4),avg int(4));

i)insert into marks(studid,phy,chem,maths) values(101,56,67,78);
ii)update marks set tot=(phy+chem+maths) where studid in (101,102,103);
iii)update marks set avg=tot/3 where studid in (101,102,103);
--------------------------------------

joining 2 tables:-
---------------------------
select a.studid,a.name,a.address,a.salary,b.phy,b.chem,b.maths,b.tot,b.avg from student a,marks b where a.studid=b.studid;
---------------------------------
composite KEY
--------------------------------
CREATE TABLE mphasisstudents
( studid INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR(30) NOT NULL,
address VARCHAR(30) NOT NULL,
location VARCHAR(30) NOT NULL,
PRIMARY KEY(studid,NAME)
);

----------------------------------------------------------------------------------------
CREATE TABLE mphasisstudent
( studid INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR(30) DEFAULT NULL UNIQUE,
address VARCHAR(30) DEFAULT NULL,
location VARCHAR(30) DEFAULT NULL,
PRIMARY KEY(studid,NAME)
);
-----------------------------------------------------------------
Java database connectivity
------------------------------------------------
we are going connect database(mySql) with java.
--------------------------------------------------------------------------
java prg <-----> driver (translater) <------------->MySql
(byte code)									(ASCII)
---------------------------------------------------------------------------
step 1:- we need to load the driver
step 2:- we need to create the connection with the database
step 3:- write the statement (create/insert/update/delete/select)
step 4:- exceute the querry
-----------------------------------------------------------------------------------------------
example-1
--------------------
import java.sql.*;
public class Create1 
{
public static void main(String[] args)throws Exception
{
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/batch2pm","root","1234");
	Statement st=con.createStatement();
	st.execute("create table employee(empno int,name varchar(30),address varchar(30))");
	System.out.println("table create");
}
}
-------------------------------------------------------------------------------
example-2
---------------------
import java.sql.*;
public class Create1 
{
public static void main(String[] args)throws Exception
{
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/batch2pm","root","1234");
	Statement st=con.createStatement();
	st.execute("insert into employee values(101,'sandip','hydarbad')");
	System.out.println("row inserted");
}
}
----------------------------------------------
example-3
--------------------------
import java.sql.*;
public class Create1 
{
public static void main(String[] args)throws Exception
{
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/batch2pm","root","1234");
	Statement st=con.createStatement();
	st.execute("update employee set address='hydarabad' where empno=102");
	System.out.println("row updated");
}
}
--------------------------------------------------------------------
example-4
-----------------
import java.sql.*;
public class Create1 
{
public static void main(String[] args)throws Exception
{
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/batch2pm","root","1234");
	Statement st=con.createStatement();
	st.execute("delete from employee where empno=102");
	System.out.println("row deleted");
}
}
--------------------------------------------------------------------------------
example-5
---------------------------------------
import java.sql.*;
import java.util.*;
public class Create1 
{
public static void main(String[] args)throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter empno,name,address");
	int empno=ob.nextInt();
	String name=ob.next();
	String address=ob.next();
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/batch2pm","root","1234");
	PreparedStatement st=con.prepareStatement("insert into employee values(?,?,?)");
	st.setInt(1, empno);
	st.setString(2, name);
	st.setString(3, address);
	st.execute();
	System.out.println("row inserted");
}
}
--------------------------------------------------------
example-6
------------------
import java.sql.*;
import java.util.*;
public class Create1 
{
public static void main(String[] args)throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter name,address and empno which you want to update");
	String name=ob.next();
	String address=ob.next();
	int empno=ob.nextInt();
	Class.forName("com.mysql.jdbc.Driver");
	Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/batch2pm","root","1234");
	PreparedStatement st=con.prepareStatement("update employee set name=?,address=? where empno=?");
	st.setString(1, name);
	st.setString(2, address);
	st.setInt(3, empno);
	st.execute();
	System.out.println("row updated");
}
}
------------------------------------------------------------
springBoot
---------------------
example1
--------------------
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class SpringBootExample2pm1Application {

	public static void main(String[] args) {
		ApplicationContext ac=SpringApplication.run(SpringBootExample2pm1Application.class, args);
		Test1 xyz=ac.getBean("obj",Test1.class);
		xyz.welcome();
		System.out.println("the sum is "+xyz.sum(6, 7));
		
		Test2 pqr=ac.getBean("obj2",Test2.class);
		System.out.println("the sub is "+pqr.sub(16, 7));
		System.out.println("the mul is "+pqr.mul(16, 7));
		System.out.println("the div is "+pqr.div(16, 7));
		
	}

}
-----------------------------------------------------------------------------------------
package com.example.demo;

import org.springframework.stereotype.Component;

@Component("obj")
public class Test1 {

	public void welcome()
	{
		System.out.println("welcome to SpringBoot at 2pm Batch");
	}
	public int sum(int a,int b)
	{
		return a+b;
	}
}
----------------------------------------------------------
package com.example.demo;
import org.springframework.stereotype.Component;
@Component("obj2")
public class Test2
{
public int sub(int a,int b)
{
	return a-b;
}
public int mul(int a,int b)
{
	return a*b;
}
public int div(int a,int b)
{
	return a/b;
}

}
-------------------------------------------------------------------------------------------------

example-2
-----------------
package com.example.demo;

import org.springframework.stereotype.Component;

@Component("obj3")
public class Employee 
{
int empno;
String name,address;
public void input(int empno, String name, String address) {
	this.empno = empno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
----------------------------------------------------------------------------
package com.example.demo;
import java.util.*;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class SpringBootExample2pm1Application {

	public static void main(String[] args) {
		ApplicationContext ac=SpringApplication.run(SpringBootExample2pm1Application.class, args);
		Test1 xyz=ac.getBean("obj",Test1.class);
		xyz.welcome();
		System.out.println("the sum is "+xyz.sum(6, 7));
		
		Test2 pqr=ac.getBean("obj2",Test2.class);
		System.out.println("the sub is "+pqr.sub(16, 7));
		System.out.println("the mul is "+pqr.mul(16, 7));
		System.out.println("the div is "+pqr.div(16, 7));
		 
		Employee abc=ac.getBean("obj3",Employee.class);
		Scanner ob=new Scanner(System.in);
		System.out.println("enter empno ,name,address");
		int empno=ob.nextInt();
		String name=ob.next();
		String add=ob.next();
		abc.input(empno, name, add);
		abc.display();
	}

}
-------------------------------------------------------------------------------------------------------------------
We will call the class according to the order no
---------------------------------------------------------------------
Interfaces :-
1) CommandLineRunner :- it has a run method.This is auto readable/scanable method.The main class we read the method.
@Component :-CommandLineRunner,Ordered
@Repository:-
@Service
@Controller
These are 4 auto component scan annotation type.
public void run(String... args) throws Exception
{
}

2)Ordered:- according to the order it will execute the class.
public int getOrder()
{
return <order no>
}
------------------------------------------------------------------------------------------
Example-2
---------------------
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBootExample2pm2Application {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootExample2pm2Application.class, args);
		System.out.println("This is a main class");
	}

}
-----------------------------------------------------------------------------------
package com.example.demo;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.Ordered;
import org.springframework.stereotype.Component;
@Component
public class Test1 implements CommandLineRunner,Ordered
{

	@Override
	public int getOrder() {
		
		return 3;
	}

	@Override
	public void run(String... args) throws Exception 
	{
	System.out.println("This file should run at 3rd position Test1");
			}

}
-----------------------------------------------------------------------------
package com.example.demo;

import org.springframework.boot.CommandLineRunner;
import org.springframework.core.Ordered;
import org.springframework.stereotype.Component;
@Component
public class Test2 implements CommandLineRunner,Ordered
{
	@Override
	public int getOrder() {
				return 1;
	}

	@Override
	public void run(String... args) throws Exception 
	{
		System.out.println("This is test2 runing first");
		
	}

}
-----------------------------------------------------------
package com.example.demo;

import org.springframework.boot.CommandLineRunner;
import org.springframework.core.Ordered;
import org.springframework.stereotype.Component;

@Component
public class Test3 implements CommandLineRunner,Ordered
{

	@Override
	public int getOrder() {
		
		return 2;
	}

	@Override
	public void run(String... args) throws Exception {
		System.out.println("This class  will run second Test3");
		
	}

}
--------------------------------------------------------------------
wap to display your details
1)addressDetails ------
2)companyDetails---------
3)EducationDetails------
4)your details-----------
----------------------------------------------
1)yourDetails
2)addressDeatils
3)EducationDetails
4)CompanyDetails
--------------------------------------------------------------------
JDBC
-----------------
java program:- 
Class.forName("loading of driver");
Connection con=DriverManager.getConnect("mysql:localhost/Batch2pm");
PreparedStatement();
execute();
----------------------------------------------
8.0.1--mysql version
-------------------------
oracle
--------------
mongodb
--------------------
SqlServer
---------------------------------
Hibernate
---------------
JPA ----Java persistance API(template)
---------------------------------
hibernateConfiguration.xml(connection part)
student.hbm.xml(table part)
-----------------------------------
*don't have to compile
we have to make change and save it.
-----------------------------------------------------
JPA---property file used in SpringBoot
------------------------------------------------------------
pom.xml
-------------------batch2p
<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.3</version>  <-----------------------------------------version
		<relativePath/> 
	</parent>
<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

	
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>5.1.1</version>
</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
---------------------------------------------------------------------------------------------

parent version play a important role.
The child will download as the compactable to the parent.
----------------------------------------------------------------------------

properties
----------------------
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/batch2pm
spring.datasource.username=root
spring.datasource.password=1234
------------------------------------------------------------

package com.example.demo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.Ordered;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
@Component
public class Insert implements CommandLineRunner,Ordered
{
	@Autowired   //has-a relationship
	private JdbcTemplate jt;
	@Override
	public void run(String... args) throws Exception
	{
		
		  String sql="insert into employee values(?,?,?)";
		  int x=jt.update(sql,109,"avijit","Orissa"); 
		  System.out.println("row inserted"+x);
		 
	}
	@Override
	public int getOrder() {
		
		return 2;
	}
}

//create table employee(empno int,name varchar(30),address varchar(30));
-------------------------------------------------------------------------------------------------------
package com.example.demo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.Ordered;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
@Component
public class Update implements CommandLineRunner,Ordered
{
	@Autowired   //has-a relationship
	private JdbcTemplate jt;
	@Override
	public void run(String... args) throws Exception
	{
		String sql1="update employee set name=?,address=? where empno=?";
		int y=jt.update(sql1,"Yash","Pune",109);
		System.out.println("row updated"+y);
	}
	@Override
	public int getOrder() {
		
		return 3;
	}
}


---------------------------------------------------------------------------
package com.example.demo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.Ordered;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
@Component
public class Delete implements CommandLineRunner,Ordered
{
	@Autowired   //has-a relationship
	private JdbcTemplate jt;
	@Override
	public void run(String... args) throws Exception
	{
		String sql="delete from employee where empno=?";
		int y=jt.update(sql,109);
		System.out.println("row deleted"+y);
	}
	@Override
	public int getOrder() {
				return 1;
	}
}


----------------------------------------------------------------------------------------------------

create a bank table(custaccno,name,address,balance)
perform insert,update,delete in single program using springBootJPA.
-------------------------------------------------Example-1------------------------------------------------------
step 1:-create starter project
step 2:- select war 
step 3:-create a folder inside webapp---WEB-INF
step 4:-create folder inside WEB-INF---views
step 5:-create the .jsp files inside the views.
----------------------------------------------------------------------------
SpringBoot MVC
-------------------------------
First.jsp
-------------------------
<html>
<body>
 <h1><center>Employee Registration Page</center></h1>
 <form action="register">
 <table>
<tr><td>Enter empno</td><td><input type="text" name=t1 size=20></td></tr>
<tr><td>Enter name</td><td><input type="text" name=t2 size=20></td></tr>
<tr><td>Enter address</td><td><input type="text" name=t3 size=20></td></tr>
<tr><td></td><td><input type="submit" value="submit"></td></tr>
 </table>
 </form>
 </body>
 </html>
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.2.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>SpringBootMVCexample-1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>SpringBootMVCexample-1</name>
	<description>sandip Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>5.1.1</version>
</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
------------------------------------------------------------------------------
controller
---------------------
package com.example.demo;
import org.springframework.jdbc.core.JdbcTemplate;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
@Controller
public class TestController 
{
@Autowired
private JdbcTemplate jt;
private HttpServletRequest req;
private HttpServletResponse res;

@GetMapping("/show")
public String showRegister()
{
	return "First";   <------First.jsp
}
@RequestMapping("/register")   <----- <form action="register">
public String doRegistration(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
{
	res.setContentType("text/html");
	PrintWriter pw=res.getWriter();
	String a=req.getParameter("t1");
	String b=req.getParameter("t2");
	String c=req.getParameter("t3");
	String sql="insert into employee values(?,?,?)";
	int count=jt.update(sql,a,b,c);
	pw.println("row inserted"+count);
		


return "success";   <----success.jsp
	
}

}
-------------------------------------------------------------------
server.port=8090

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/batch2pm
spring.datasource.username=root
spring.datasource.password=1234


spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
---------------------------------------------------
success.jsp
----------------------
<h1><center>Successfully Registered</center></h1>
-----------------------------------------------------------
browser :--- http://localhost:8090/show
-----------------------------------------------------------------













